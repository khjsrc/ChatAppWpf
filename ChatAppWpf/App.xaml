<Application x:Class="ChatAppWpf.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:ChatAppWpf"
             xmlns:sw="clr-namespace:ChatAppWpf.WindowControlScripts"
             StartupUri="StartupWindow.xaml">
    <Application.Resources>
        <!--These resources are for global use, i.e. for the whole application.-->

        <SolidColorBrush x:Key="WindowColor" Color="#363636"/>
        <SolidColorBrush x:Key="WindowBackColor" Color="#363636"/>
        <SolidColorBrush x:Key="WindowForeColor" Color="#000000"/>
        <SolidColorBrush x:Key="WindowForeHighlightColor" Color="WhiteSmoke"/>
        <SolidColorBrush x:Key="WindowButtonColor" Color="#363636"/>
        <SolidColorBrush x:Key="WindowButtonOverColor" Color="#646464"/>
        <SolidColorBrush x:Key="WindowButtonPressedColor" Color="#707070"/>

        <Style x:Key="WindowIcon" TargetType="{x:Type Image}">
            <Setter Property="Height" Value="25"></Setter>
            <Setter Property="Width" Value="25"></Setter>
        </Style>

        <sw:WindowMinimizeCommand x:Key="MinimizeCommand"></sw:WindowMinimizeCommand>
        <sw:WindowMaximizeCommand x:Key="MaximizeCommand"></sw:WindowMaximizeCommand>
        <sw:WindowCloseCommand x:Key="CloseCommand"></sw:WindowCloseCommand>

        <Style x:Key="CustomWindowStyle" TargetType="{x:Type Window}"> <!--Window style-->
            <Setter Property="WindowStyle" Value="None"></Setter>
            <Setter Property="AllowsTransparency" Value="True"></Setter>
            <Setter Property="MinWidth" Value="525"></Setter>
            <Setter Property="MinHeight" Value="350"></Setter>
            <Setter Property="Background" Value="#484848"></Setter>
            <Setter Property="BorderBrush" Value="#303030"></Setter>
            <Setter Property="BorderThickness" Value="0"></Setter>
            <Setter Property="ResizeMode" Value="CanResize"></Setter>
        </Style>

        <Style TargetType="{x:Type Button}" x:Key="WindowButton">
            <Setter Property="Height" Value="25"/>
            <Setter Property="Width" Value="25"/>
            <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
            <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowColor}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource WindowButtonOverColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{StaticResource WindowButtonPressedColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ButtonDefaultStyle" TargetType="{x:Type Button}"> <!--Buttons style with click behaviour.-->
            <Setter Property="Background" Value="#484848"></Setter>
            <Setter Property="Foreground" Value="#b0800c"></Setter>
            <Setter Property="FontFamily" Value="Comic Sans MS"></Setter>
            <Setter Property="BorderThickness" Value="0"></Setter>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"></Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid x:Name="gd" Background="{TemplateBinding Background}">
                            <ContentPresenter x:Name="contentPresenter" 
                                              ContentTemplate="{TemplateBinding ContentTemplate}" 
                                              Content="{TemplateBinding Content}" 
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              Margin="{TemplateBinding Padding}" 
                                              Focusable="False" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            </ContentPresenter>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter Property="Background" Value="#707070" TargetName="gd"></Setter>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#646464"></Setter>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="WindowBorderControlTemplate" TargetType="{x:Type Window}"> <!--Control template for windows' borders.-->
            <Grid>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="25"></RowDefinition>
                        <RowDefinition Height="*"></RowDefinition>
                    </Grid.RowDefinitions>
                    <Grid Grid.Row="0" Margin="0,0,0,0" HorizontalAlignment="Stretch" Background="{StaticResource WindowBackColor}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="25"></ColumnDefinition>
                            <ColumnDefinition Width="*"></ColumnDefinition>
                            <ColumnDefinition Width="75"></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <Label Grid.Column="0" 
                               sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource CloseCommand}"                                                
                               sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" Padding="0">
                            <Image DockPanel.Dock="Left" Style="{StaticResource WindowIcon}" Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},Path=Icon}"                                          
                                   Width="16"                                            
                                   sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"                                            
                                   sw:ShowSystemMenuBehavior.LeftButtonShowAt="{Binding ElementName=WindowContent}"/>
                        </Label>
                        <Label Grid.Column="1" DockPanel.Dock="Left" Content="{TemplateBinding Property=Title}" Padding="3,0,0,0"                                                                                   
                               HorizontalContentAlignment="Center" 
                               VerticalContentAlignment="Center" 
                               HorizontalAlignment="Stretch" 
                               VerticalAlignment="Stretch" 
                               Background="{StaticResource WindowBackColor}"
                               FontSize="16" 
                               sw:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                               sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource MaximizeCommand}" 
                               sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                               sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                               sw:ShowSystemMenuBehavior.RightButtonShow="true">
                        </Label>
                        <StackPanel Grid.Column="2" Orientation="Horizontal">
                            <Button DockPanel.Dock="Right" Style="{StaticResource WindowButton}" Command="{StaticResource MinimizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">_</Button>
                            <Button DockPanel.Dock="Right" Style="{StaticResource WindowButton}" Command="{StaticResource MaximizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">🗔</Button>
                            <Button DockPanel.Dock="Right"  Style="{StaticResource WindowButton}" Command="{StaticResource CloseCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" FontWeight="Bold">❌</Button>
                        </StackPanel>
                    </Grid>
                    <Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Grid>
                            <AdornerDecorator>
                                <ContentPresenter x:Name="WindowContent"/>
                            </AdornerDecorator>
                            <ResizeGrip  x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
                        </Grid>
                    </Border>
                </Grid>
                <Thumb x:Name="ThumbTop" Height="6" Margin="14,0" VerticalAlignment="Top" Cursor="SizeNS"  Opacity="0" sw:WindowResizeBehavior.TopResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbTopLeft" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Left" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.TopLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbBottom" Height="6" Margin="14,0" VerticalAlignment="Bottom" Cursor="SizeNS" Opacity="0" sw:WindowResizeBehavior.BottomResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbTopRight" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Right" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.TopRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbRight" HorizontalAlignment="Right" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.RightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbBottomRight" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Right" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.BottomRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbLeft" HorizontalAlignment="Left" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.LeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbBottomLeft" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Left" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.BottomLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                        <Condition Property="WindowState" Value="Normal"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style x:Key="CustomScrollBarStyle" TargetType="{x:Type ScrollBar}">
            <Setter Property="Background" Value="#484848"></Setter>
            <Setter Property="BorderThickness" Value="0"></Setter>
            <Setter Property="Foreground" Value="#7c7c7c"></Setter>
            <Setter Property="Width" Value="10"></Setter>
            <Setter Property="HorizontalAlignment" Value="Right"></Setter>
        </Style>

    </Application.Resources>
</Application>
